Add a new yum repo /etc/yum.repos.d/mysql.repo:

[mysql-community]
name=MySQL Community connectors
baseurl=http://repo.mysql.com/yum/mysql-connectors-community/el/$releasever/$basearch/
enabled=1
gpgcheck=1

rpm --import http://repo.mysql.com/RPM-GPG-KEY-mysql

yum install mysql-connector-python


hostname --fqdn

nano /etc/hostname

hostnamectl set-hostname cloudstack

sudo nano /etc/hosts

reboot

ping cloudstack.alitech.local

yum install chrony

sudo apt install chrony

nano /etc/apt/sources.list.d/cloudstack.list

sudo wget -O - http://download.cloudstack.org/release.asc|apt-key add -

sudo apt-get update

sudo apt-get install cloudstack-management


sudo apt-key adv --keyserver keys.gnupg.net --recv-keys 584DF93F

sudo apt-get update && sudo apt-get install cloudstack-management cloudstack-usage cloudstack-agent

cloudstack-setup-management

service cloudstack-management start

sudo service mysql restart

sudo apt-get install mysql-server

mysqld --server-id

gedit /etc/mysql/my.cnf

sudo service mysql restart

sudo cat /etc/mysql/debian.cnf

nano /etc/mysql/debian.cnf

mysqld -uroot -p

sudo service mysql restart

mysqld -u root -p

cloudstack-setup-databases cloud:<dbpassword>@localhost --deploy-as=root:F4rhan.@li

sudo service mysql restart

cloudstack-setup-databases cloud:<dbpassword>@localhost --deploy-as=root:F4rhan.@li

ana555

sudo apt-get install cloudstack-management

sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf

nano /etc/mysql/my.cnf

nano /etc/mysql/conf.d/cloudstack.cnf

sudo service mysql restart

sudo service mysql status

cloudstack-setup-databases cloud:<dbpassword>@localhost --deploy-as=root:F4rhan.@li

sudo apt-get install cloudstack-management

sudo service cloudstack-management start

sudo service cloudstack-agent start

ufw allow mysql

cloudstack-setup-management

mkdir -p /export/primary

mkdir -p /export/secondary

nano /etc/exports

/export  *(rw,async,no_root_squash,no_subtree_check)

exportfs -a

apt install nfs-kernel-server

nano /etc/sysconfig/nfs

apt install nfs-utils

service rpcbind start

service nfs startmm

chkconfig nfs on

chkconfig rpcbind on

reboot

192.168.1.17:/export/primary    /mnt/primary    nfs     rsize=8192,timeo=14,intr,vers=3,noauto  0       2
192.168.1.17:/export/secondary       /mnt/secondary    nfs     rsize=8192,timeo=14,intr,vers=3,noauto  0       2

mount -t nfs 192.168.1.17:/export/secondary /mnt/secondary




vi /etc/idmapd.conf


apt-get install openssh-server sudo htop tar build-essential
 
apt-get install intel-microcode

apt-get install bridge-utils

nano /etc/apt/sources.list.d/cloudstack.list

apt-get update -y

apt-get install cloudstack-management cloudstack-usage mysql-server

vi /etc/idmapd.conf

nano /etc/sysconfig/nfs

nano /etc/mysql/conf.d/cloudstack.cnf

nano /etc/mysql/mysql.conf.d/mysqld.conf

cd /etc/mysql/mysql.conf.d/

ls

nano /etc/mysql/mysql.conf.d/mysqld.cnf

systemctl restart mysql

nano /etc/mysql/debian.cnf

mysql -h127.0.0.1 -uroot -p

mysql -h10.0.2.15 -uroot -p


/etc/init.d/mysql stop

mysqld -u mysql --skip-grant-tables &

mysql -u root


	

mysql -u root -p

cloudstack-setup-database cloud:cloud@localhost --deploy-as=root:nevada -i 10.0.2.15

cloudstack-setup-databases cloud:cloud@localhost --deploy-as=root:nevada -i 10.0.2.15

cloudstack-setup-databases cloud:cloud@localhost --deploy-as=root:F4rhan.@li -i 192.168.1.17

systemctl restart mysql

mysql -uroot -p

apt-get install nfs-kernel-server quota

 nano /etc/exports
 
 mkdir -p /export/primary /export/secondary
 
 exportfs -a
 
 sed -i -e 's/^RPCMOUNTDOPTS="--manage-gids"$/RPCMOUNTDOPTS="-p 892 --manage-gids"/g' /etc/default/nfs-kernel-server
 
 sed -i -e 's/^STATDOPTS=$/STATDOPTS="--p 662 --outgoing-port 2020"/g' /etc/default/nfs-common
 
 echo "NEED_STATD=yes" >> /etc/default/nfs-common
 
 sed -i -e 's/^RPCRQUOTADOPTS=$/RPCRQUOTADOPTS="-p 875"/g' /etc/default/quota
 
 service nfs-kernel-server restart
 
 wget http://packages.shapeblue.com/systemvmtemplate/4.11/systemvmtemplate-4.11.3-kvm.qcow2.bz2
 
 cd /home
 
 cd farhan
 
  wget http://packages.shapeblue.com/systemvmtemplate/4.11/systemvmtemplate-4.11.3-kvm.qcow2.bz2
  
  /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m  /export/secondary -u http://download.cloudstack.org/systemvm/4.14/systemvmtemplate-4.14.0-kvm.qcow2.bz2 -h kvm -o localhost -r cloud -d cloud
  
  apt-get install qemu-kvm cloudstack-agent
  
  /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m  /export/secondary -f systemvmtemplate-4.11.3-kvm.qcow2.bz2 -h kvm -o localhost -r cloud -d cloud
  
  apt-get install qemu-kvm cloudstack-agent
  
  sudo apt-get purge lvm2
  
  sudo systemctl unmask  lvm2-lvmetad && sudo systemctl enable lvm2-lvmetad
  
  systemctl status lvm2-lvmetad.socket 
  
  cat /etc/libvirt/qemu.conf
  
  sed -i -e 's/\#vnc_listen.*$/vnc_listen = "0.0.0.0"/g' /etc/libvirt/qemu.conf
  
  cat /etc/default/libvirtd
  
  sed -i -e 's/.*.libvirtd_opts.*/libvirtd_opts="-1"/' /etc/default/libvirtd
  
  cat /etc/default/libvirtd
   
  echo 'listen_tls=0' >> /etc/libvirt/libvirtd.conf

echo 'listen_tcp=1' >> /etc/libvirt/libvirtd.conf 

echo 'tcp_port = "16509"' >> /etc/libvirt/libvirtd.conf

 echo 'mdns_adv = 0' >> /etc/libvirt/libvirtd.conf 
 
echo 'auth_tcp = "none"' >> /etc/libvirt/libvirtd.conf

systemctl restart libvirtd

nano /etc/libvirt/libvirtd.conf

systemctl restart libvirtd 

systemctl status libvirtd

sudo systemctl unmask  lvm2-lvmetad && sudo systemctl enable lvm2-lvmetad

sudo add-apt-repository ppa:openjdk-r/ppa

java -version

sudo apt install openjdk-8-jdk openjdk-8-jre

cat >> /etc/environment <<EOL

JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

JRE_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre

EOL

sudo update-alternatives --config java

sudo apt-get start cloudstack-management

apt-get install cloudstack-management cloudstack-usage

apt-get install uuid

UUID=$(uuid)

 echo host_uuid = \"$UUID\" >> /etc/libvirt/libvirtd.conf
 
 ifconfig
 
 ip -a
 
 NETWORK=10.0.2.0/24
 
 iptables -A INPUT -s $NETWORK -m --state NEW -p tcp --dport 111 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p udp --dport 111 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 2049 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 32803 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 32769 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p udp --dport 32769  -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 892  -j ACCEPT

 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 875 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 662 -j ACCEPT
 
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 8250 -j ACCEPT
  
 iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 8080 -j ACCEPT

iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 9090 -j ACCEPT

iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 16514 -j ACCEPT

iptables -L

iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 111 -j ACCEPT

apt-get install iptables-persistent

sudo apt-get install iptables-persistent

nano /var/lib/dpkg/lock-frontend

 ps aux | grep -i apt

sudo killall apt apt-get

 sudo dpkg --configure -a
 
 iptables -F
 
 sudo apt-get update
 
 sudo apt install software-properties-common

ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/

ln -s /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper /etc/apparmor.d/disable

apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd

apparmor_parser -R /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper

cloudstack-setup-management

 systemctl status cloudstack-management
 
 tail -f /var/log/cloudstack/management/management-server.log
 
  apt install net-tools
  
  sudo ufw allow 111/tcp
  
  sudo ufw disable
  
  telnet 10.0.2.15 8250
  
  cd /etc/ssh/sshd_config
  
  nano /etc/ssh/sshd_config
  
  nano /etc/sysconfig/libvirtd
  
  nano /etc/default/cloudstack-agent

  nano /etc/default/libvirtd
  
  cd /etc/default/
  
  ls
  
  nano libvirtd
  
  nano cloudstack-agent
  
   nano qemu-kvm
   
   nano cloudstack-
ment
   
   nano /etc/default/libvirtd
   
   nano /etc/mysql/conf.d/cloudstack.cnf
   
    nano /etc/libvirt/qemu.conf
	
	cd /etc/libvirt
	
	ls
	
	nano libvirtd.conf
	
	systemctl restart qemu-kvm
	
	systemctl restart libvirtd
	
	systemctl restart libvirt
	
	systemctl restart cloudstack-agent
		
	cd /var/log/cloudstack/management/
	
	ls
	
	nano access.log
	
	ls
	
	nano setupManagement.log
	
	 virsh -c qemu+tcp://host/system
	 
	 virsh -c qemu+tcp://10.0.2.15/system

	 virsh -c qemu+tcp://host/system
	 
	 grep listen_ /etc/libvirt/libvirtd.conf
	 
	 nano /etc/libvirt/libvirtd.conf
	 
	 nano /etc/mysql/mysql.conf.d/mysql.cnf
	 
	 nano mysqld_safe_syslog.cnf
	 
	 snap install cloudmonkey 
	 
	 nano /etc/cloudstack/management/db.properties
	 
	 mount -t nfs 10.1.2.15:/export/primary
	 
	 mount -t nfs 10.0.2.15:/export/secondary
	 
	 showmount
	 
	 service rpcbind start

	 service nfs start
	 
	 apt-get install openntp
	 
	 cat /etc/fstab
	 
	 cat /var/log/secure
	 
	 cat /etc/ssh/sshd_config
	 
	 nano /etc/ssh/sshd_config
	 
	 nano /etc/sysconfig/nfs
	 
	  mount -t nfs 10.0.2.15:/export/secondary /mnt/secondary 
	  
	  nano /etc/network/interfaces
	  
	  brctl show
	  
	  sudo service network-manager restart
	  
	  sudo gufw disable
	  
	  sudo apt remove gufw
	  
	  NETWORK=192.168.1.0/24
	  
	  iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 80 -j ACCEPT
	  
	  iptables -A INPUT -s $NETWORK -m state --state NEW -p tcp --dport 443 -j ACCEPT

	  
	  
 	ifconfig
	  
	apt install bridge-utils

	brctl addbr cloudbr0


	Configuring bridging in /etc/network/interfaces

	To make your bridge a little more permanent, you will need to edit /etc/network/interfaces. Using our example names, make it look like this and you’re set (if you want to use DHCP):

	 # This file describes the network interfaces available on your system
	 # and how to activate them. For more information, see interfaces(5).

	 # The loopback network interface
	 auto lo
	 iface lo inet loopback

	 # Set up interfaces manually, avoiding conflicts with, e.g., network manager
	 iface eth0 inet manual

	 iface eth1 inet manual

	 # Bridge setup
	 iface br0 inet dhcp
	    bridge_ports eth0 eth1
	  
	  

Ports used by CloudStack and its entities:

Management Server
8080: Primary GUI / Authentication API Port
8096: User/Client to CloudStack Management Server (unauthenticated)
8787: CloudStack (Tomcat) debug socket
9090: Cloudstack Management Cluster Interface
45219: JMX console

SystemVM Agent Communication - Must be open on Management Server
3922: Secure System secure communication port
8250: SystemVM to Management unsecure communication port

MySQL Server
3306: MySQL Server

Hypervisor
22/443: XenServer, XAPI
22: KVM
443: vCenter

External Ports
53: DNS
111/2049: NFS communication for Secondary Storage VM
860/3260: iSCSI communication port for iSCSI software connector
7080: AWS API server

iptables -I INPUT -p tcp -m tcp --dport 8080 -j ACCEPT  
iptables -I INPUT -p tcp -m tcp --dport 8096 -j ACCEPT  
iptables -I INPUT -p tcp -m tcp --dport 8787 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 9090 -j ACCEPT  
iptables -I INPUT -p tcp -m tcp --dport 45219 -j ACCEPT 
iptables -I INPUT -p tcp -m tcp --dport 3922 -j ACCEPT 
iptables -I INPUT -p tcp -m tcp --dport 8250 -j ACCEPT 
iptables -I INPUT -p tcp -m tcp --dport 22 -j ACCEPT 
iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT 
iptables -I INPUT -p udp -m udp --dport 53 -j ACCEPT 
iptables -I INPUT -p udp -m udp --dport 860 -j ACCEPT 
iptables -I INPUT -p udp -m udp --dport 3260 -j ACCEPT 
iptables -I INPUT -p udp -m udp --dport 7080 -j ACCEPT 
	  
iptables -I INPUT -p tcp -m tcp --dport 111 -j ACCEPT                       
iptables -I INPUT -p tcp -m tcp --dport 662 -j ACCEPT                       
iptables -I INPUT -p tcp -m tcp --dport 875 -j ACCEPT                       
iptables -I INPUT -p tcp -m tcp --dport 892 -j ACCEPT                       
iptables -I INPUT -p tcp -m tcp --dport 1798 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 2003 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 2049 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 3306 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 4505:4506 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 6800:7300 -j ACCEPT                 
iptables -I INPUT -p tcp -m tcp --dport 7689 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 8250 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 16514 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 16509 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 32769 -j ACCEPT
iptables -I INPUT -p tcp -m tcp --dport 32803 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 111 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 662 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 875 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 892 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 1798 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 2003 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 2049 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 3306 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 4505:4506 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 49152:49216 -j ACCEPT               
iptables -I INPUT -p udp -m udp --dport 5900:6100 -j ACCEPT                 
iptables -I INPUT -p udp -m udp --dport 6800:7300 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 7689 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 8080 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 8250 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 16514 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 16509 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 32769 -j ACCEPT
iptables -I INPUT -p udp -m udp --dport 32803 -j ACCEPT

iptables-save > /etc/sysconfig/iptables


/usr/local/cloud/systemvm/ssvm-check.sh


SSL for CloudStack

1. Generate a new 2048-bit private key

openssl genrsa -des3 -out *.cloud.alitech.uk.key 2048

2. Generate a new certificate CSR. Ensure the creation of a wildcard certificate, eg *.consoleproxy.company.com

openssl req -new -key *.cloud.alitech.uk.key -out *.cloud.alitech.uk.csr

3. Head to the website of your favorite trusted Certificate Authority, purchase an SSL certificate, and submit the CSR. You should receive a valid certificate in return
In this case I am using Hosting by AliTech DNS server

add new subdomain in CyberPanel

Cloud.alitech.uk

Add A record for this subdomain

make sure DNS is pointing

Issue SSL from CyberPanel

Go to 

/etc/letsencrypt/live/<YOUR_DOMAIN>/fullchain.pem

fullchain.pem is your root certificate




	  
	  
	  
	  
	  
	  
	  
  
  
  
  
  
  
  
  
  
  
  
  
  
  






